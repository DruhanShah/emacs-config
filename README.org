#+title: Druhan's Emacs Configuration
#+author: Druhan Shah

#+startup: overview
#+property: header-args :tangle init.el
#+auto_tangle: t

This configuration is heavily based off of [[https://github.com/rougier][Nicolas Rougier]]'s emacs packages and ideas. All the packages taken more or less verbatim from Mr. Rougier's repositories are in the =nano/= directory and any other configuration files are in the =not-nano/= directory.

This is a literate configuration, which means all the code blocks in this Org file will be exported using Org-Babel's tangle feature into their corresponding config files on save. As a result, all the configuration necessary will be in this file as far as possible. Sometime in the future, a Table of Contents will be implemented to make navigating this document easier.

* Early-init and other preambles

The Early-Init file is executed before =init.el=, and hence is where we disable =package.el= in favour of Elpaca.

#+begin_src emacs-lisp :tangle early-init.el
  ;; Early-init file, executed before init.el when starting Emacs

  (setq package-enable-at-startup nil)
#+end_src

Now, we throw in a preamble comment in the Init file just in case someone reads it before this README :P

#+begin_src emacs-lisp
  ;; ---------------------------------------------
  ;;              EMACS INIT FILE
  ;; 
  ;; This is where all of my configuration for
  ;; GNU Emacs resides. Please read README.org for
  ;; more detailed information about the config.
  ;; ---------------------------------------------
#+end_src


* Package Manager (Elpaca)

This codeblock is directly from the Elpaca repository's README. I have only added a final expression integrating Elpaca with =use-package=.

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.10)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order
    '(elpaca :repo "https://github.com/progfolio/elpaca.git"
             :ref nil :depth 1 :inherit ignore
             :files (:defaults "elpaca-test.el" (:exclude "extensions"))
             :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (<= emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                    ((zerop
                      (apply #'call-process
                             `("git" nil ,buffer t "clone"
                               ,@(when-let* ((depth (plist-get order :depth)))
                                   (list
  				  (format "--depth=%d" depth)
  				  "--no-single-branch"))
                               ,(plist-get order :repo) ,repo))))
                    ((zerop (call-process "git" nil buffer t "checkout"
                                          (or (plist-get order :ref) "--"))))
                    (emacs (concat invocation-directory invocation-name))
                    ((zerop (call-process
                             emacs nil buffer nil "-Q" "-L" "." "--batch"
                             "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                    ((require 'elpaca))
                    ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
  (elpaca elpaca-use-package
    (elpaca-use-package-mode))
#+end_src


* Bits and bobs

This is a bunch of other niceties that I would like to have, since that would make configuration and usage a good bit easier.

- Specify that the frame needs to be in light mode (Makes it somewhat easier for =nano-theme=, probably?)
- Add all files in the =nano= directory into the loading path

#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'background-mode 'light)
  (add-to-list 'load-path "~/.config/emacs/nano")
#+end_src


* Vim Emulation

I use Evil-mode along with God-mode as an Evil state. I've tried Meow and didn't like it as much. I've tried God-mode as is and loved it, except for the pure Vim bindings.

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-redo)
    :config
    (setq evil-default-state 'normal)
    (setq evil-want-C-i-jump t)
    (setq evil-want-C-w-delete t)
    (setq evil-want-Y-yank-to-eol t)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-d-scroll t)
    (evil-mode 1))

  (use-package evil-collection
    :ensure t
    :after evil
    :init
    (evil-collection-init))

  (use-package evil-god-state
    :ensure t
    :after evil
    :config
    (evil-define-key 'normal global-map "," 'evil-execute-in-god-state)
    (evil-define-key 'god global-map "escape" 'evil-god-state-bail))

  (use-package evil-surround
    :ensure t
    :after evil
    :config
    (global-evil-surround-mode 1))
#+end_src


* Copilot and other GitHub stuff

This sets up three major plugins: Magit (all hail), Copilot, and Copilot-chat. Transient is in there to avoid some inexplicable errors with Elpaca.

#+begin_src emacs-lisp
  (use-package transient
    :ensure t)

  (use-package magit
    :ensure t)
#+end_src

This is a bunch of stuff that causes bugs so I need to fix it rq.

#+begin_src emacs-lisp :tangle not-init.el
  (use-package copilot
    :vc (:url "https://github.com/copilot-emacs/copilot.el"
         :rev :newest
         :branch "main")
    :ensure t
    :hook (prog-mode . copilot-mode)
    :config
    (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion))

  (use-package copilot-chat
    :vc (:url "https://github.com/chep/copilot-chat.el"
         :rev :newest
         :branch "main")
    :ensure t
    :after (request org markdown-mode))
#+end_src


* Typography

This is all the stuff I need to improve typography when using Emacs. This includes coding ligatures and icons.

#+begin_src emacs-lisp
  (use-package ligature
    :ensure t
    :config
    (ligature-set-ligatures
     'prog-mode '("<---" "<--"  "<<-" "<-" "->" "-->" "--->" "<->" "<-->" "<--->"
                  "<---->" "<!--" "<==" "<===" "<=" "=>" "=>>" "==>" "===>" ">=" "<=>"
                  "<==>" "<===>" "<====>" "<!---" "<~~" "<~" "~>" "~~>" "::" ":::"
  		"==" "!=" "===" "!==" ":=" ":-" ":+" "<*" "<*>" "*>" "<|" "<|>" "|>"
  		"+:" "-:" "=:" "<******>" "++" "+++"))
    (global-ligature-mode t))


  (use-package nerd-icons
    :ensure t
    :if (display-graphic-p)
    :config
    (setq nerd-icons-font-family "Symbols Nerd Font"))

  (use-package nerd-icons-dired
    :ensure t
    :after nerd-icons
    :hook (dired-mode . nerd-icons-dired-mode))

  (use-package nerd-icons-ibuffer
    :ensure t
    :after nerd-icons
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

  (use-package nerd-icons-completion
    :ensure t
    :after nerd-icons
    :hook (nerd-icons-completion-mode))

#+end_src


* Dired

This has some nice features that I would like when using the builtin Dired. Likely to expand further as I get more comfortable.

#+begin_src emacs-lisp
  (require 'dired)
  (setq dired-listing-switches
        "-l --almost-all --human-readable --group-directories-first")
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+end_src


* PDF Tools and LaTeX

This section is about LaTeX and its rendering. This is independent of Org-LaTeX exports.

On second thought, I'm getting rid of AucTeX since I'm mainly using Orgmode anyways for all things LaTeX. If there's anything else that I need pure LaTeX for, I can use nvim since I've get VimTeX anyways.

#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t
    :init
    (pdf-tools-install)
    :hook (pdf-view-mode . (lambda () (pdf-view-themed-minor-mode 1))))
#+end_src


* Completions

I'm using Corfu at the moment for my completions at point.

#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    :config
    (setq corfu-auto t)
    (global-corfu-mode))
#+end_src


* Terminal shenanigans

I'm experimenting with different terminal emulation methods since I like the font rendering of Emacs' GUI.

Things i've tried:
- +Term and ANSI-Term+
- *Eat*
- VTerm

#+begin_src emacs-lisp
  (use-package eat
    :ensure t)
#+end_src


* Org Mode

All hail the OrgMode system! Lots of very helpful modules have been used here, and several more can be added once I start getting more comfortable with them.

#+begin_src emacs-lisp
  (use-package org
    :ensure (:type built-in)
    :hook (org-mode . org-indent-mode)
    :hook (org-mode . visual-line-mode)
    :hook (org-mode . mixed-pitch-mode)
    :hook (org-mode . org-display-inline-images)
    :config
    (setq org-ellipsis "..."
          org-hide-emphasis-markers t
          org-pretty-entities t
          org-use-sub-superscripts '{}
          org-format-latex-options (plist-put org-format-latex-options :scale 1.1)
          org-latex-src-block-backend 'listings
          org-todo-keywords
          '((sequence "TODO" "DOING" "|" "DONE")
  	  (sequence "LATER" "|" "NOPE"))
  	org-priority-highest 0
  	org-priority-lowest 9
  	org-priority-default 5
          org-agenda-files
          '("~/Notes/Productivity/gcal.org"
            "~/Notes/Productivity/tasks.org"
            "~/Notes/Productivity/appointments.org")
  	org-hidden-keywords '(title author date)
          org-capture-templates
          '(("t" "Todo" entry
  	   (file+headline "~/Notes/Productivity/refile.org" "Tasks to refile")
             "* TODO %?\n  %i\n  %a")))
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t))))
#+end_src

** Jupyter and other Babel shenanigans

Babel is a module of Org mode that deals with other programming languages and how they integrate with Org. These integrations include "tangling" (bundling all codeblocks in an org file into an actual code file), and running in the file itself.

I use this module greatly for treating Jupyter notebooks and Org files like each other.

This also includes an Export module to export an org file as a Jupyter notebook

#+begin_src emacs-lisp
  (use-package ob-ipython
    :ensure t
    :after org
    :config
    (add-to-list 'org-babel-load-languages '(ipython . t))
    (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))

  (use-package jupyter
    :ensure t
    :after org
    :config
    (add-to-list 'org-babel-load-languages '(jupyter . t))
    (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))

(use-package ox-ipynb
  :ensure (ox-ipynb :host github :repo "jkitchin/ox-ipynb")
  :after org)
#+end_src

*** Auto tangling

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :ensure t
    :after org
    :hook (org-mode . org-auto-tangle-mode))
#+end_src

** Google Calendar

I would like to be able to sync my Org agenda and other task and schedule management with Google Calendar (unless I find a way to use the Agenda on mobile :P)

Never mind, I'm discarding this module since it causes security issues, and has several bugs that I'd rather not have in my daily drive system. I'll still be working on making it usable for me.

** UI Stuff

These are some nice-to-haves that make Org files look good in Emacs.

#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :after org
    :hook (org-mode . org-bullets-mode)
    :config
    (setq org-bullets-bullet-list '("◉" "○" "" "✸" "")))

  (use-package org-autolist
    :ensure t
    :after org
    :hook (org-mode . org-autolist-mode))

  (use-package mixed-pitch
    :ensure t
    :after org
    :hook (org-mode . mixed-pitch-mode))
#+end_src


* Treesitter and LSP

This feels more comfortable and simultaneously not. I need to get more comfortable with both of these as they are implemented in Emacs.

#+begin_src emacs-lisp
  (use-package treesit-auto
    :ensure t
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))

  (setq treesit-font-lock-level 4)

  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize))
#+end_src


* Minibuffer (basically Vertico)

This customizes the way the Minibuffer works in Emacs.

Best Case Scenario: I'd like to make the =:= binding in Evil-mode behave like =M-x= in the sense that it automatically uses the minibuffer for completion (makes it a lot clearer).

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :commands (vertico-mode)
    :init
    (vertico-mode 1)
    (vertico-buffer-mode 1)
    (defvar vertico-preselect)
    :config (setq vertico-preselect 'first))

  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode))

  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))

  (use-package consult
    :ensure t
    :config
    (setq completion-in-region-function 'consult-completion-in-region))
#+end_src


* Other esoteric stuff

Stuff that is just here to get one task or a few tasks done, not worth going too deep into.

** Dyalog APL

I did try learning Dyalog APL for the APL Forge contest, and found it quite cool. Nice to have a minor mode (and sometime later, and input-mode) for it.

#+begin_src emacs-lisp
  (use-package dyalog-mode
    :ensure t
    :config
    (defun org-babel-execute:dyalog (body params)
      (org-babel-execute:jupyter-apl body params))

    (defun org-babel-dyalog-initiate-session (&optional arg1 arg2)
      (org-babel-jupyter-apl-initiate-session &optional arg1 arg2))

    (setq org-babel-default-header-args:jupyter-apl '((:kernel . "dyalog_apl")
                                                      (:session . "*new*")
                                                      (:exports . "both")
                                                      (:eval . "never-export"))

          org-babel-default-header-args:dyalog '((:kernel . "dyalog_apl")
                                                 (:session . "*new*")
                                                 (:exports . "both")
                                                 (:eval . "never-export"))))
#+end_src


* NANO Emacs modules

This is the bit that is (more or less) entirely copy-pasted from Nicolas Rougier's repositories. These are what make Emacs look so incredibly clean. These still have some bits to clean up, so this is not nearly final.

For now, I'll be keeping all the Elisp in separate files in the =nano/= directory and =require=-ing them here. Ideally I would like to include all Elisp in this file, but that might make this unreadable.

#+begin_src emacs-lisp
  (add-hook 'elpaca-after-init-hook
            (lambda ()
              (progn
                (require 'nano-theme)
                (nano-mode)
                (nano-light)

  	      (require 'nano-modeline)
  	      (nano-modeline nil nil t)

  	      (require 'nano-splash)
  	      (require 'nano-calendar)
  	      (require 'nano-agenda)

  	      (require 'nano-vertico)
  	      (nano-vertico-mode)
  	      (require 'nano-read)

  	      (require 'nano-writer)
  	      (require 'nano-org)

  	      ;; (require 'nano-elfeed)
  	      (require 'nano-term)
  	      (require 'nano-kill)
  	      (require 'nano-block)

  	      (require 'nano-box))))
#+end_src
